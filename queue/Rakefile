require 'rspec/core/rake_task'
require 'rubygems/package_task'
require './lib/txgh-queue'

Bundler::GemHelper.install_tasks

desc 'Run specs'
RSpec::Core::RakeTask.new do |t|
  t.pattern = './spec/**/*_spec.rb'
end

task default: :spec

namespace :spec do
  desc 'Run full spec suite'
  task full: [:full_spec_env, :spec]

  task :full_spec_env do
    ENV['FULL_SPEC'] = 'true'
  end
end

namespace :version do
  task :bump, [:level] do |t, args|
    levels = %w(major minor patch)
    level = args[:level]

    until levels.include?(level)
      STDOUT.write("Indicate version bump level (#{levels.join(', ')}): ")
      level = STDIN.gets.strip

      unless levels.include?(level)
        puts "That's not a valid version bump level, try again."
      end
    end

    level.strip!

    major, minor, patch = TxghQueue::VERSION.split('.').map(&:to_i)

    case level
      when 'major'
        major += 1; minor = 0; patch = 0
      when 'minor'
        minor += 1; patch = 0
      when 'patch'
        patch += 1
    end

    new_version = [major, minor, patch].join('.')
    puts "Bumping from #{TxghQueue::VERSION} to #{new_version}"

    # rewrite version.rb
    version_file = './lib/txgh-queue/version.rb'
    contents = File.read(version_file)
    contents.sub!(/VERSION\s*=\s['"][\d.]+['"]$/, "VERSION = '#{new_version}'")
    File.write(version_file, contents)

    # update constant in case other rake tasks run in this process afterwards
    TxghQueue::VERSION.replace(new_version)
  end

  task :history do
    history = File.read('History.txt')
    history = "== #{TxghQueue::VERSION}\n* \n\n#{history}"
    File.write('History.txt', history)
    system "vi History.txt"
  end

  task :commit_and_push do
    system "git add lib/txgh-queue/version.rb"
    system "git add History.txt"
    system "git commit -m 'Bumping version to #{TxghQueue::VERSION}'"
    system "git push origin HEAD"
  end
end

namespace :publish do
  task :all do
    task_names = %w(
      version:bump version:history version:commit_and_push
      publish:tag publish:build_gem publish:publish_gem
    )

    task_names.each do |task_name|
      STDOUT.write "About to execute #{task_name}, continue? (yes/no/skip): "
      answer = STDIN.gets

      case answer.downcase
        when /ye?s?/
          Rake::Task[task_name].invoke
        when /no?/
          puts "Exiting!"
          exit 0
        else
          puts "Skipping #{task_name}"
      end
    end
  end

  task :tag do
    system("git tag -a 'txgh-queue-v#{TxghQueue::VERSION}' && git push origin --tags")
  end

  task :build_gem => [:build]  # use preexisting build task from rubygems/package_task

  task :publish_gem do
    system("gem push pkg/txgh-queue-#{TxghQueue::VERSION}.gem")
  end
end

task publish: 'publish:all'
